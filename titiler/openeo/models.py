"""titiler.openeo Models.

generated by https://github.com/koxudaxi/datamodel-code-generator/:
filename:  https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

"""

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel
from typing_extensions import Self

OPENEO_VERSION = "1.2.0"


class Link(BaseModel):
    rel: str = Field(
        ...,
        json_schema_extra={
            "description": "Relationship between the current document and the linked document. SHOULD be a [registered link relation type](https://www.iana.org/assignments/link-relations/link-relations.xml) whenever feasible.",
            "example": "related",
        },
    )
    href: AnyUrl = Field(
        ...,
        json_schema_extra={
            "description": "The value MUST be a valid URL.",
            "example": "https://openeo.example",
        },
    )
    type: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "The value MUST be a string that hints at the format used to represent data at the provided URI, preferably a media (MIME) type.",
            "example": "text/html",
        },
    )
    title: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Used as a human-readable label for a link.",
            "example": "openEO",
        },
    )


class openEOVersion(BaseModel):
    url: AnyUrl = Field(
        ...,
        json_schema_extra={
            "description": "*Absolute* URLs to the service.",
            "example": "https://openeo.example",
        },
    )
    production: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Specifies whether the implementation is ready to be used in production use (`true`) or not (`false`).\nClients SHOULD only connect to non-production implementations if the user explicitly confirmed to use a non-production implementation.\nThis flag is part of `GET /.well-known/openeo` and `GET /`. It MUST be used consistently in both endpoints.",
        },
    )
    api_version: Literal["1.2.0"] = Field(
        json_schema_extra={
            "description": "Version number of the openEO specification this back-end implements"
        },
    )


class openEOVersions(BaseModel):
    versions: List[openEOVersion]


class Endpoint(BaseModel):
    path: str = Field(
        ...,
        json_schema_extra={
            "description": """Path to the endpoint, relative to the URL of this
        endpoint. In general the paths MUST follow the paths
        specified in the openAPI specification as closely as
        possible. Therefore, paths MUST be prepended with a
        leading slash, but MUST NOT contain a trailing
        slash. Variables in the paths MUST be placed in
        curly braces and follow the parameter names in the
        openAPI specification, e.g. `{job_id}`."""
        },
    )
    methods: List[Literal["GET", "POST", "PATCH", "PUT", "DELETE", "OPTIONS"]] = Field(
        ...,
        json_schema_extra={
            "description": "Supported HTTP verbs in uppercase. It is OPTIONAL to list `OPTIONS` as method."
        },
    )


class Plan(BaseModel):
    name: str = Field(
        ...,
        json_schema_extra={
            "description": "Name of the plan. It MUST be accepted in a *case insensitive* manner throughout the API",
            "example": "free",
        },
    )
    description: str = Field(
        ...,
        json_schema_extra={
            "description": "A description that gives a rough overview over the plan",
            "example": "Free plan for testing",
        },
    )
    paid: bool = Field(
        ...,
        json_schema_extra={
            "description": "Indicates whether the plan is a paid plan (`True`) or a free plan (`False`)",
            "example": "Free plan for testing",
        },
    )
    url: Optional[AnyUrl] = Field(
        None,
        json_schema_extra={
            "description": "URL to a web page with more details about the plan",
            "example": "https://cloud.example/plans/free-plan",
        },
    )


class Billing(BaseModel):
    currency: str = Field(
        ...,
        json_schema_extra={
            "description": """The currency the back-end is billing in. The currency
            MUST be either a valid currency code as defined in
            ISO-4217 or a back-end specific unit that is used for
            billing such as credits, tiles or CPU hours.
            If set to `null`, budget and costs are not supported
            by the back-end and users can't be charged.""",
            "example": "USD",
        },
    )
    default_plan: Optional[str] = Field(
        json_schema_extra={
            "description": """Name of the plan the back-end uses for billing in case
            1. the user has not subscribed to a specific plan
                (see `default_plan` in `GET /me`) and
            2. also did not provide a specific plan with the
                processing request.

            If a free plan is available at the back-end, it is
            probably most useful to provide this as the back-end
            wide default plan and override it with paid plans through
            the user-specific default plan in `GET /me`.
            Otherwise, users that have not set up payment yet MAY
            receive an error for each processing requests where
            they did not provide a free plan specifically.""",
            "example": "free",
        },
    )
    plans: Optional[List[Plan]] = Field(
        None, json_schema_extra={"description": "Array of plans"}
    )


class Capabilities(BaseModel):
    api_version: Literal["1.2.0"] = Field(
        json_schema_extra={
            "description": "Version number of the openEO specification this back-end implements"
        },
    )
    backend_version: str = Field(
        ...,
        json_schema_extra={
            "description": "Version number of the back-end implementation.",
            "example": "0.1.0",
        },
    )
    stac_version: str = Field(
        ...,
        pattern=r"^(0\.9.\d+|1\.\d+.\d+)",
        json_schema_extra={
            "description": "The [version of the STAC specification](https://github.com/radiantearth/stac-spec/releases), which MAY not be equal to the [STAC API version](#tag/EO-Data-Discovery/STAC). Supports versions 0.9.x and 1.x.x.",
            "example": "1.0.0",
        },
    )
    type: Optional[Literal["Catalog"]] = Field(
        None,
        json_schema_extra={
            "description": "For STAC versions >= 1.0.0-rc.1 this field is required.",
            "example": "Catalog",
        },
    )
    id: str = Field(
        ...,
        json_schema_extra={
            "description": "Identifier for the service.",
            "example": "cool-eo-cloud",
        },
    )
    title: str = Field(
        ...,
        json_schema_extra={
            "description": "The name of the service.",
            "example": "Example Cloud Corp",
        },
    )
    description: str = Field(
        ...,
        json_schema_extra={
            "description": "A description of the service, which allows the service provider to introduce the user to its service",
            "example": """This service is provided to you by [Example Cloud Corp.](https://cloud.example). It implements the full openEO API and allows to process a range of 999 EO data sets, including

            * Sentinel 1/2/3 and 5
            * Landsat 7/8

            A free plan is available to test the service. For further information please contact our customer service at [support@cloud.example](mailto:support@cloud.example).""",
        },
    )
    conformsTo: Optional[List[AnyUrl]] = Field(
        None,
        json_schema_extra={
            "description": "Lists all conformance classes specified in various standards that the\nimplementation conforms to. Conformance classes are commonly used in\nall OGC APIs and the STAC API specification.\n\nThe general openEO conformance class is `https://api.openeo.org/1.2.0`.\nSee the individual openEO API extensions for their conformance classes.\n\nThis property is REQUIRED for STAC API versions 1.0.0-beta.1 and later.",
            "examples": [
                "https://api.openeo.org/1.2.0",
                "https://api.openeo.org/extensions/commercial-data/0.1.0",
                "https://api.openeo.org/extensions/federation/0.1.0",
                "https://api.stacspec.org/v1.0.0/collections",
            ],
        },
    )
    production: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Specifies whether the implementation is ready to be used in production use (`true`) or not (`false`).\nClients SHOULD only connect to non-production implementations if the user explicitly confirmed to use a non-production implementation.\nThis flag is part of `GET /.well-known/openeo` and `GET /`. It MUST be used consistently in both endpoints."
        },
    )
    endpoints: List[Endpoint] = Field(
        ...,
        json_schema_extra={
            "description": """Lists all supported endpoints. Supported are all
        endpoints, which are implemented, return usually
        a 2XX or 3XX HTTP status code and are fully compatible
        to the API specification.
        An entry for this endpoint (path `/` with method `GET`)
        SHOULD NOT be listed.
        Each path MUST only be listed once in the array."""
        },
    )
    billing: Optional[Billing] = Field(
        None,
        json_schema_extra={
            "description": """Billing related data, e.g. the currency used or available plans to process jobs.

        This property MUST be specified if the back-end uses any
        billing related API functionalities, e.g. budgeting or
        estimates.

        The absence of this property doesn't mean the back-end is
        necessarily free to use for all. Providers may choose to
        bill users outside of the API, e.g. with a monthly fee
        that is not depending on individual API interactions."""
        },
    )
    links: List[Link] = Field(
        ...,
        json_schema_extra={
            "description": "Links related to this service, e.g. the homepage of the service provider or the terms of service."
        },
    )


JsonSchemaType = Literal[
    "array", "boolean", "integer", "null", "number", "object", "string"
]


class JsonSchema(BaseModel, extra="allow"):
    """JsonSchema model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    field_schema: Optional[AnyUrl] = Field(
        AnyUrl("http://json-schema.org/draft-07/schema#"),
        alias="$schema",
        json_schema_extra={
            "description": "The JSON Schema version. If not given in the context of openEO,\ndefaults to `draft-07`.\n\nYou may need to add the default value for `$schema` property explicitly to the JSON Schema\nobject before passing it to a JSON Schema validator."
        },
    )
    field_id: Optional[AnyUrl] = Field(
        None, alias="$id", json_schema_extra={"description": "ID of your JSON Schema."}
    )
    type: Optional[Union[JsonSchemaType, List[JsonSchemaType]]] = Field(
        None,
        json_schema_extra={
            "description": "The allowed basic data type(s) for a value.\n\nIf this property is not present, all data types are allowed."
        },
    )
    pattern: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "The regular expression a string value must match against."
        },
    )
    enum: Optional[List] = Field(
        None, json_schema_extra={"description": "An exclusive list of allowed values."}
    )
    minimum: Optional[float] = Field(
        None,
        json_schema_extra={
            "description": "The minimum value (inclusive) allowed for a numerical value."
        },
    )
    maximum: Optional[float] = Field(
        None,
        json_schema_extra={
            "description": "The maximum value (inclusive) allowed for a numerical value."
        },
    )
    minItems: Optional[float] = Field(
        0,
        ge=0.0,
        json_schema_extra={
            "description": "The minimum number of items required in an array."
        },
    )
    maxItems: Optional[float] = Field(
        None,
        ge=0.0,
        json_schema_extra={
            "description": "The maximum number of items required in an array."
        },
    )
    items: Optional[Union[List[Self], Self]] = Field(
        None,
        json_schema_extra={
            "description": "Specifies schemas for the items in an array."
        },
    )


class ProcessJsonSchema(JsonSchema):
    """ProcessJsonSchema model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    subtype: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "The allowed sub data type for a value. See the chapter on [subtypes](#section/Processes/Defining-Processes) for more information."
        },
    )
    deprecated: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is deprecated with the potential\nto be removed in any of the next versions. It should be transitioned out\nof usage as soon as possible and users should refrain from using it in\nnew implementations."
        },
    )


class ResourceParameter(ProcessJsonSchema):
    """ResourceParameter model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    description: str = Field(
        ...,
        json_schema_extra={
            "description": "A brief description of the parameter according to [JSON Schema draft-07](https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.1)."
        },
    )
    required: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Determines whether this parameter is mandatory."
        },
    )
    experimental: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback."
        },
    )
    default: Optional[Any] = Field(
        None,
        json_schema_extra={
            "description": 'The default value represents what would be assumed by the consumer of the input as the value of the parameter if none is provided. The value MUST conform to the defined type for the parameter defined at the same level. For example, if type is string, then default can be "foo" but cannot be 1. See [JSON Schema draft-07](https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.2).'
        },
    )


class FileFormat(BaseModel):
    """FileFormat model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    title: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "A human-readable short title to be displayed to users **in addition** to the names specified in the keys. This property is only for better user experience so that users can understand the names better. Example titles could be `GeoTiff` for the key `GTiff` (for file formats) or `OGC Web Map Service` for the key `WMS` (for service types). The title MUST NOT be used in communication (e.g. in process graphs), although clients MAY translate the titles into the corresponding names."
        },
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation."
        },
    )
    gis_data_types: List[
        Literal["raster", "vector", "table", "pointcloud", "other"]
    ] = Field(
        ...,
        json_schema_extra={
            "description": "Specifies the supported GIS spatial data types for this format.\nIt is RECOMMENDED to specify at least one of the data types, which will likely become a requirement in a future API version."
        },
    )
    deprecated: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is deprecated with the potential\nto be removed in any of the next versions. It should be transitioned out\nof usage as soon as possible and users should refrain from using it in\nnew implementations."
        },
    )
    experimental: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback."
        },
    )
    parameters: Dict[str, ResourceParameter] = Field(
        ...,
        json_schema_extra={
            "description": "Specifies the supported parameters for this file format.",
            "title": "File Format Parameters",
        },
    )
    links: Optional[List[Link]] = Field(
        None,
        json_schema_extra={
            "description": "Links related to this file format, e.g. external documentation.\n\nFor relation types see the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)."
        },
    )


class FileFormats(BaseModel):
    input: Dict[str, FileFormat] = Field(
        json_schema_extra={
            "description": """Map of supported input file formats, i.e. file formats a
        back-end can **read** from. The property keys are the file
        format names that are used by clients and users, for
        example in process graphs."""
        }
    )
    output: Dict[str, FileFormat] = Field(
        json_schema_extra={
            "description": """Map of supported output file formats, i.e. file formats a
        back-end can **write** to. The property keys are the file
        format names that are used by clients and users, for
        example in process graphs."""
        }
    )


class Conformance(BaseModel):
    conformsTo: List[AnyUrl] = Field(
        ...,
        json_schema_extra={
            "description": "Lists all conformance classes specified in various standards that the\nimplementation conforms to. Conformance classes are commonly used in\nall OGC APIs and the STAC API specification.\n\nThe general openEO conformance class is `https://api.openeo.org/1.2.0`.\nSee the individual openEO API extensions for their conformance classes.\n\nThis property is REQUIRED for STAC API versions 1.0.0-beta.1 and later.",
            "example": [
                "https://api.openeo.org/1.2.0",
                "https://api.openeo.org/extensions/commercial-data/0.1.0",
                "https://api.openeo.org/extensions/federation/0.1.0",
                "https://api.stacspec.org/v1.0.0/collections",
            ],
        },
    )


class ProcessReturnValue(BaseModel):
    """ProcessReturnValue model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: `process_id()`"
        },
    )
    schema_: Union[ProcessJsonSchema, List[ProcessJsonSchema]] = Field(
        ...,
        alias="schema",
        json_schema_extra={
            "description": "Either a single data type or a list of data types for process parameter or process return values.",
            "title": "Process Data types",
        },
    )


class ProcessExceptions(BaseModel):
    """ProcessExceptions model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed description to explain the error to client\nusers and back-end developers. This should not be shown in the\nclients directly, but MAY be linked to in the errors `url`\nproperty.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used\nfor rich text representation."
        },
    )
    message: str = Field(
        ...,
        json_schema_extra={
            "description": 'Explains the reason the server is rejecting the request. This message is intended to be displayed to the client user. For "4xx" error codes the message SHOULD explain shortly how the client needs to modify the request.\n\nThe message MAY contain variables, which are enclosed by curly brackets. Example: `{variable_name}`',
            "example": "The value specified for the process argument '{argument}' in process '{process}' is invalid: {reason}",
        },
    )
    http: Optional[int] = Field(
        400,
        json_schema_extra={
            "description": "HTTP Status Code, following the [error handling conventions in openEO](#section/API-Principles/Error-Handling). Defaults to `400`."
        },
    )


class BaseParameter(BaseModel):
    name: str = Field(
        ...,
        pattern=r"^\w+$",
        json_schema_extra={
            "description": "A unique name for the parameter. \n\nIt is RECOMMENDED to use [snake case](https://en.wikipedia.org/wiki/Snake_case) (e.g. `window_size` or `scale_factor`)."
        },
    )
    description: str = Field(
        ...,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: `process_id()`"
        },
    )
    optional: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Determines whether this parameter is optional to be specified even when no default is specified.\nClients SHOULD automatically set this parameter to `true`, if a default value is specified. Back-ends SHOULD NOT fail, if a default value is specified and this flag is missing."
        },
    )
    deprecated: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is deprecated with the potential\nto be removed in any of the next versions. It should be transitioned out\nof usage as soon as possible and users should refrain from using it in\nnew implementations."
        },
    )
    experimental: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback."
        },
    )
    default: Optional[Any] = Field(
        None,
        json_schema_extra={
            "description": "The default value for this parameter. Required parameters SHOULD NOT specify a default value. Optional parameters SHOULD always specify a default value."
        },
    )


class ProcessParameter(BaseParameter):
    """Process model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    schema_: Union[ProcessJsonSchema, List[ProcessJsonSchema]] = Field(
        ...,
        alias="schema",
        json_schema_extra={
            "description": "Either a single data type or a list of data types for process parameter or process return values.",
            "title": "Process Data types",
        },
    )


class Process(BaseModel):
    """Process model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    id: str = Field(
        ...,
        pattern=r"^\w+$",
        json_schema_extra={
            "description": "The identifier for the process. It MUST be unique across its namespace\n(e.g. predefined processes or user-defined processes).\n\nClients SHOULD warn the user if a user-defined process is added with the \nsame identifier as one of the predefined process.",
            "example": "ndvi",
        },
    )
    summary: Optional[str] = Field(
        None,
        json_schema_extra={"description": "A short summary of what the process does."},
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: `process_id()`"
        },
    )
    categories: Optional[List[str]] = Field(
        None, json_schema_extra={"description": "A list of categories."}
    )
    parameters: Optional[List[ProcessParameter]] = Field(
        None,
        json_schema_extra={
            "description": "A list of parameters.\n\nThe order in the array corresponds to the parameter order to\nbe used in clients that don't support named parameters.\n\n**Note:** Specifying an empty array is different from (if allowed)\n`null` or the property being absent.\nAn empty array means the process has no parameters.\n`null` / property absent means that the parameters are unknown as\nthe user has not specified them. There could still be parameters in the\nprocess graph, if one is specified."
        },
    )
    returns: Optional[ProcessReturnValue] = Field(
        None,
        json_schema_extra={"description": "A short summary of what the process does."},
    )
    deprecated: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is deprecated with the potential\nto be removed in any of the next versions. It should be transitioned out\nof usage as soon as possible and users should refrain from using it in\nnew implementations."
        },
    )
    experimental: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback."
        },
    )
    exceptions: Optional[Dict[str, ProcessExceptions]] = Field(
        None, json_schema_extra={"description": "Process Exceptions."}
    )
    examples: Optional[List[Example]] = Field(
        None, json_schema_extra={"description": "Examples, may be used for unit tests."}
    )
    links: Optional[List[Link]] = Field(
        None,
        json_schema_extra={
            "description": "Links related to this process, e.g. additional external documentation.\n\nIt is RECOMMENDED to provide links with the following `rel` (relation) types:\n\n1. `latest-version`: If a process has been marked as deprecated, a link SHOULD\npoint to the preferred version of the process. The relation types `predecessor-version`\n(link to older version) and `successor-version` (link to newer version) can also be used\nto show the relation between versions.\n\n2. `example`: Links to examples of other processes that use this process.\n\n3. `cite-as`: For all DOIs associated with the process, the respective DOI\nlinks SHOULD be added.\n\nFor additional relation types see also the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)."
        },
    )
    process_graph: Optional[Dict[str, ProcessGraph]] = Field(
        None, json_schema_extra={"description": "Process Node"}
    )


class ProcessArgumentValue1(BaseModel):
    """ProcessArgumentValue1 model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    from_parameter: Optional[Any] = None
    from_node: Optional[Any] = None
    process_graph: Optional[Any] = None


class ProcessArgumentValue2(BaseModel, extra="forbid"):
    """ProcessArgumentValue2 model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    from_node: str = Field(
        ...,
        json_schema_extra={
            "description": "The ID of the node that data is expected to come from."
        },
    )


class ProcessArgumentValue3(BaseModel, extra="forbid"):
    """ProcessArgumentValue3 model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    from_parameter: str = Field(
        ...,
        json_schema_extra={
            "description": "The name of the parameter that data is expected to come from."
        },
    )


class ProcessArgumentValue(RootModel):
    """ProcessArgumentValue model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    # Union[
    #     ProcessArgumentValue1,
    #     str,
    #     float,
    #     bool,
    #     List[Self],
    #     ProcessGraphWithMetadata,
    #     ProcessArgumentValue2,
    #     ProcessArgumentValue3,
    # ]
    root: Any = Field(
        None,
        json_schema_extra={
            "description": "Arguments for a process. See the API documentation for more information.",
            "title": "Process Argument Value",
        },
    )


class ProcessGraph(BaseModel):
    """ProcessGraph model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    process_id: str = Field(
        ...,
        pattern=r"^\w+$",
        json_schema_extra={
            "description": "The identifier for the process. It MUST be unique across its namespace\n(e.g. predefined processes or user-defined processes).\n\nClients SHOULD warn the user if a user-defined process is added with the \nsame identifier as one of the predefined process.",
            "example": "ndvi",
        },
    )
    namespace: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "The namespace the `process_id` is valid for.\n\nThe following options are predefined by the openEO API, but additional\nnamespaces may be introduced by back-ends or in a future version of the API.\n\n* `null` (default): Checks both user-defined and predefined processes,\n   but prefers user-defined processes if both are available.\n   This allows users to add missing predefined processes for portability,\n   e.g. common processes from [processes.openeo.org](https://processes.openeo.org)\n   that have a process graph included.\n   It is RECOMMENDED to log the namespace selected by the back-end for debugging purposes.\n* `backend`: Uses exclusively the predefined processes listed at `GET /processes`.\n* `user`: Uses exclusively the user-defined processes listed at `GET /process_graphs`.\n\nIf multiple processes with the same identifier exist, Clients SHOULD\ninform the user that it's recommended to select a namespace."
        },
    )
    result: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Used to specify which node is the last in the chain and returns the result to return to the requesting context. This flag MUST only be set once in each list of process nodes."
        },
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Optional description about the process and its arguments."
        },
    )
    arguments: Optional[Dict[str, ProcessArgumentValue]] = None


class ProcessGraphWithMetadata(Process):
    """ProcessGraphWithMetadata model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    id: Optional[str] = None  # type: ignore
    summary: Optional[str] = None
    description: Optional[str] = None
    parameters: Optional[List] = None
    returns: Optional[Dict[str, Any]] = None  # type: ignore
    process_graph: Dict[str, ProcessGraph] = Field(
        json_schema_extra={"title": "Process Node"}
    )


class Example(BaseModel):
    """Example model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    title: Optional[str] = Field(
        None, json_schema_extra={"description": "A title for the example."}
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: `process_id()`"
        },
    )
    arguments: Optional[Dict[str, ProcessArgumentValue]] = None
    returns: Optional[Any] = Field(
        None,
        json_schema_extra={
            "description": "The return value which can by of any data type."
        },
    )


class Processes(BaseModel):
    processes: List[Process]
    links: List[Link] = Field(
        ...,
        json_schema_extra={
            "description": "Links related to this list of resources, for example links for pagination\nor alternative formats such as a human-readable HTML version.\nThe links array MUST NOT be paginated.\n\nIf pagination is implemented, the following `rel` (relation) types apply:\n\n1. `next` (REQUIRED): A link to the next page, except on the last page.\n\n2. `prev` (OPTIONAL): A link to the previous page, except on the first page.\n\n3. `first` (OPTIONAL): A link to the first page, except on the first page.\n\n4. `last` (OPTIONAL): A link to the last page, except on the last page.\n\nFor additional relation types see also the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)."
        },
    )


class StacVersion(RootModel):
    """StacVersion model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: str = Field(
        ...,
        pattern=r"^(0\.9.\d+|1\.\d+.\d+)",
        json_schema_extra={
            "description": "The [version of the STAC specification](https://github.com/radiantearth/stac-spec/releases), which MAY not be equal to the [STAC API version](#tag/EO-Data-Discovery/STAC). Supports versions 0.9.x and 1.x.x.",
            "example": "1.0.1",
        },
    )


class StacExtensions(RootModel):
    """StacExtensions model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: List[Union[AnyUrl, str]] = Field(
        ...,
        json_schema_extra={
            "description": "A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For STAC < 1.0.0-rc.1  shortcuts such as `sar` can be used instead of the schema URL."
        },
    )


class CollectionId(RootModel):
    """CollectionId model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: str = Field(
        ...,
        pattern=r"^[\w\-\.~\/]+$",
        json_schema_extra={
            "description": "A unique identifier for the collection, which MUST match the specified pattern.",
            "example": "Sentinel-2A",
        },
    )


class StacLicense(RootModel):
    """StacLicense model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: str = Field(
        ...,
        json_schema_extra={
            "description": "License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/).\nAlternatively, use `proprietary` if the license is not on the SPDX\nlicense list or `various` if multiple licenses apply. In these two cases\nlinks to the license texts SHOULD be added, see the `license` link\nrelation type.\n\nNon-SPDX licenses SHOULD add a link to the license text with the\n`license` relation in the links section. The license text MUST NOT be\nprovided as a value of this field. If there is no public license URL\navailable, it is RECOMMENDED to host the license text and link to it.",
            "example": "Apache-2.0",
        },
    )


Role = Literal["producer", "licensor", "processor", "host"]


class StacProvider(BaseModel):
    """StacProvider model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    name: str = Field(
        ...,
        json_schema_extra={
            "description": "The name of the organization or the individual.",
            "example": "Example Cloud Corp.",
        },
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.\n\nCommonMark 0.29 syntax MAY be used for rich text representation.",
            "example": "No further processing applied.",
        },
    )
    roles: Optional[List[Role]] = Field(
        None,
        json_schema_extra={
            "description": "Roles of the provider.\n\nThe provider's role(s) can be one or more of the following\nelements:\n* `licensor`: The organization that is licensing the dataset under\nthe license specified in the collection's license field.\n* `producer`: The producer of the data is the provider that\ninitially captured and processed the source data, e.g. ESA for\nSentinel-2 data.\n* `processor`: A processor is any provider who processed data to a\nderived product.\n* `host`: The host is the actual provider offering the data on their\nstorage. There SHOULD be no more than one host, specified as last\nelement of the list.",
            "examples": ["producer", "licensor", "host"],
        },
    )
    url: Optional[AnyUrl] = Field(
        None,
        json_schema_extra={
            "description": "Homepage on which the provider describes the dataset and publishes contact information.",
            "example": "https://cloud.example",
        },
    )


class StacProviders(RootModel):
    """StacProviders model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: List[StacProvider] = Field(
        ...,
        json_schema_extra={
            "description": "A list of providers, which MAY include all organizations capturing or processing the data or the hosting provider. Providers SHOULD be listed in chronological order with the most recent provider being the last element of the list."
        },
    )


class Description(RootModel):
    root: str = Field(
        ...,
        json_schema_extra={
            "description": "Detailed description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation."
        },
    )


class Bbox(RootModel):
    """Bbox model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: List[float] = Field(
        ...,
        json_schema_extra={
            "description": "Each bounding box is provided as four or six numbers,\ndepending on whether the coordinate reference system\nincludes a vertical axis (height or depth):\n\n* West (lower left corner, coordinate axis 1)\n* South (lower left corner, coordinate axis 2)\n* Base (optional, minimum value, coordinate axis 3)\n* East (upper right corner, coordinate axis 1)\n* North (upper right corner, coordinate axis 2)\n* Height (optional, maximum value, coordinate axis 3)\n\nThe coordinate reference system of the values is WGS 84\nlongitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\nFor WGS 84 longitude/latitude the values are in most cases\nthe sequence of minimum longitude, minimum latitude, maximum\nlongitude and maximum latitude.\n\nHowever, in cases where the box spans the antimeridian the\nfirst value (west-most box edge) is larger than the third value\n(east-most box edge).\n\nIf the vertical axis is included, the third and the sixth\nnumber are the bottom and the top of the 3-dimensional bounding box.",
            "example": [-180, -90, 180, 90],
        },
    )


class Spatial(BaseModel):
    """Spatial model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    bbox: Optional[List[Bbox]] = Field(
        None,
        json_schema_extra={
            "description": "One or more bounding boxes that describe the spatial extent\nof the dataset.\n\nThe first bounding box describes the overall spatial extent\nof the data. All subsequent bounding boxes describe more\nprecise bounding boxes, e.g. to identify clusters of data.\nClients only interested in the overall spatial extent will\nonly need to access the first item in each array."
        },
        min_length=1,
    )


class IntervalItem(RootModel):
    """IntervalItem model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: List[Optional[datetime]] = Field(
        ...,
        json_schema_extra={
            "description": "Begin and end times of the time interval. The coordinate\nreference system is the Gregorian calendar.\n\nThe value `null` is supported and indicates an open time\ninterval.",
            "example": ["2011-11-11T12:22:11Z", None],
        },
    )


class Temporal(BaseModel):
    """Temporal model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    interval: Optional[List[IntervalItem]] = Field(
        None,
        json_schema_extra={
            "description": "One or more time intervals that describe the temporal extent\nof the dataset.\n\nThe first time interval describes the overall temporal extent\nof the data. All subsequent time intervals describe more\nprecise time intervals, e.g. to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item in each array."
        },
        min_length=1,
    )


class Extent(BaseModel):
    """Extent model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    spatial: Spatial = Field(
        ...,
        json_schema_extra={
            "description": "The *potential* spatial extents of the features in the collection.",
            "title": "Collection Spatial Extent",
        },
    )
    temporal: Temporal = Field(
        ...,
        json_schema_extra={
            "description": "The *potential* temporal extents of the features in the collection.",
            "title": "Collection Temporal Extent",
        },
    )


class Dimension(BaseModel, extra="allow"):
    """Dimension model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    type: Union[Literal["spatial", "temporal", "bands", "geometry", "other"], str] = (
        Field(..., json_schema_extra={"description": "Type of the dimension."})
    )
    description: Optional[Description] = None


class SpatialDimension(Dimension):
    """SpatialDimension model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml
    """

    type: Literal["spatial"] = Field("spatial")
    axis: Literal["x", "y", "z"] = Field(
        ...,
        json_schema_extra={
            "description": "The axis of the spatial dimension.",
            "example": "x",
        },
    )


class CollectionSummaryStats(BaseModel):
    """CollectionSummaryStats model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    minimum: Union[str, float] = Field(
        ..., json_schema_extra={"description": "The minimum value (inclusive)."}
    )
    maximum: Union[str, float] = Field(
        ..., json_schema_extra={"description": "The maximum value (inclusive)."}
    )


class Asset(BaseModel):
    """Asset model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    href: str = Field(
        ...,
        json_schema_extra={
            "description": "URL to the downloadable asset.\nThe URLs SHOULD be available without authentication so that external clients can download them easily. If the data is confidential, signed URLs SHOULD be used to protect against unauthorized access from third parties.",
            "title": "Asset location",
        },
    )
    title: Optional[str] = Field(
        None,
        json_schema_extra={"description": "The displayed title for clients and users."},
    )
    description: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Multi-line description to explain the asset.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich\ntext representation."
        },
    )
    type: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Media type of the asset.",
            "example": "image/tiff; application=geotiff",
        },
        title="Media Type",
    )
    roles: Optional[List[str]] = Field(
        None,
        json_schema_extra={
            "description": "Purposes of the asset. Can be any value, but commonly used values are:\n\n* `thumbnail`: A visualization of the data, usually a lower-resolution true color image in JPEG or PNG format.\n* `reproducibility`: Information how the data was produced and/or can be reproduced, e.g. the process graph used to compute the data in JSON format.\n* `data`: The computed data in the format specified by the user in the process graph (applicable in `GET /jobs/{job_id}/results` only).\n* `metadata`: Additional metadata available for the computed data.",
            "example": ["data"],
        },
    )


class StacAssets(RootModel):
    """StacAssets model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    root: Optional[Dict[str, Asset]] = None


class Collection(BaseModel):
    """Collection model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    stac_version: StacVersion
    stac_extensions: Optional[StacExtensions] = None
    type: Optional[Literal["Collection"]] = Field(
        None,
        json_schema_extra={
            "description": "For STAC versions >= 1.0.0-rc.1 this field is required."
        },
    )
    id: CollectionId
    title: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "A short descriptive one-line title for the collection."
        },
    )
    description: str = Field(
        ...,
        json_schema_extra={
            "description": "Detailed multi-line description to explain the collection.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation."
        },
    )
    keywords: Optional[List[str]] = Field(
        None,
        json_schema_extra={
            "description": "List of keywords describing the collection."
        },
    )
    version: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Version of the collection.\n\nThis property REQUIRES to add `version` (STAC < 1.0.0-rc.1) or\n`https://stac-extensions.github.io/version/v1.2.0/schema.json` (STAC >= 1.0.0-rc.1)\nto the list of `stac_extensions`."
        },
    )
    deprecated: Optional[bool] = Field(
        False,
        json_schema_extra={
            "description": "Specifies that the collection is deprecated with the potential to\nbe removed. It should be transitioned out of usage as soon as\npossible and users should refrain from using it in new projects.\n\nA link with relation type `latest-version` SHOULD be added to the\nlinks and MUST refer to the collection that can be used instead.\n\nThis property REQUIRES to add `version` (STAC < 1.0.0-rc.1) or\n`https://stac-extensions.github.io/version/v1.2.0/schema.json` (STAC >= 1.0.0-rc.1)\nto the list of `stac_extensions`."
        },
    )
    license: StacLicense
    providers: Optional[StacProviders] = None
    extent: Extent = Field(
        ...,
        json_schema_extra={
            "description": "The extent of the data in the collection. Additional members MAY\nbe added to represent other extents, for example, thermal or\npressure ranges.\n\nThe first item in the array always describes the overall extent of\nthe data. All subsequent items describe more preciseextents,\ne.g. to identify clusters of data.\nClients only interested in the overall extent will only need to\naccess the first item in each array.",
            "title": "Collection Extent",
        },
    )
    links: List[Link] = Field(
        ...,
        json_schema_extra={
            "description": "Links related to this collection.\nCould reference to licensing information, other meta data formats with\nadditional information or a preview image.\n\nIt is RECOMMENDED to provide links with the following\n`rel` (relation) types:\n\n1. `root` and `parent`: URL to the data discovery endpoint at `/collections`.\n\n2. `license`: A link to the license(s) SHOULD be specified if the `license`\nfield is set to `proprietary` or `various`.\n\n3. `example`: Links to examples of processes that use this collection.\n\n4. `latest-version`: If a collection has been marked as deprecated, a link SHOULD\npoint to the latest version of the collection. The relation types `predecessor-version`\n(link to older version) and `successor-version` (link to newer version) can also be used\nto show the relation between versions.\n\n5. `alternate`: An alternative representation of the collection.\nFor example, this could be the collection available through another\ncatalog service such as OGC CSW, a human-readable HTML version or a\nmetadata document following another standard such as ISO 19115 or DCAT.\n\n6. `http://www.opengis.net/def/rel/ogc/1.0/queryables`: URL to the\nqueryables endpoint at `/collections/{collection_id}/queryables`.\nFor JSON Schema documents, the `type` field must be set to `application/schema+json`.\n\nFor additional relation types see also the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)\nand the STAC specification for Collections."
        },
    )
    cube_dimensions: Optional[Dict[str, Dimension]] = Field(
        None,
        alias="cube:dimensions",
        json_schema_extra={
            "description": "The named default dimensions of the data cube.\nNames must be unique per collection.\n\nThe keys of the object are the dimension names. For\ninteroperability, it is RECOMMENDED to use the\nfollowing dimension names if there is only a single\ndimension with the specified criteria:\n\n* `x` for the dimension of type `spatial` with the axis set to `x`\n* `y` for the dimension of type `spatial` with the axis set to `y`\n* `z` for the dimension of type `spatial` with the axis set to `z`\n* `t` for the dimension of type `temporal`\n* `bands` for dimensions of type `bands`\n* `geometry` for dimensions of type `geometry`\n\nThis property REQUIRES to add a version of the data cube extension to the list\nof `stac_extensions`, e.g. `https://stac-extensions.github.io/datacube/v2.2.0/schema.json`.",
            "title": "STAC Collection Cube Dimensions",
        },
    )
    summaries: Optional[
        Dict[str, Union[List[Any], CollectionSummaryStats, JsonSchema]]
    ] = Field(
        None,
        json_schema_extra={
            "description": "Collection properties from STAC extensions (e.g. EO,\nSAR, Satellite or Scientific) or even custom extensions.\n\nSummaries are either a unique set of all available\nvalues, statistics *or* a JSON Schema. Statistics only\nspecify the range (minimum and maximum values) by default,\nbut can optionally be accompanied by additional\nstatistical values. The range can specify the\npotential range of values, but it is recommended to be\nas precise as possible. The set of values MUST contain\nat least one element and it is strongly RECOMMENDED to\nlist all values. It is recommended to list as many\nproperties as reasonable so that consumers get a full\noverview of the Collection. Properties that are\ncovered by the Collection specification (e.g.\n`providers` and `license`) SHOULD NOT be repeated in the\nsummaries.\n\nPotential fields for the summaries can be found here:\n\n* **[STAC Common Metadata](https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/common-metadata.md)**:\n  A list of commonly used fields throughout all domains\n* **[Content Extensions](https://github.com/radiantearth/stac-spec/blob/v1.0.0/extensions/README.md#list-of-content-extensions)**:\n  Domain-specific fields for domains such as EO, SAR and point clouds.\n* **Custom Properties**:\n  It is generally allowed to add custom fields.",
            "title": "STAC Summaries (Collection Properties)",
        },
    )
    assets: Optional[StacAssets] = Field(
        None,
        json_schema_extra={
            "description": "Dictionary of asset objects for data that can be downloaded,\neach with a unique key.\nThe keys MAY be used by clients as file names.\n\nImplementing this property REQUIRES to add `collection-assets`\nto the list of `stac_extensions` in STAC < 1.0.0-rc.1."
        },
    )


class Collections(BaseModel):
    """Lists of collections and related links."""

    collections: List[Collection]
    links: List[Link] = Field(
        ...,
        json_schema_extra={
            "description": "Links related to this list of resources, for example links for pagination\nor alternative formats such as a human-readable HTML version.\nThe links array MUST NOT be paginated.\n\nIf pagination is implemented, the following `rel` (relation) types apply:\n\n1. `next` (REQUIRED): A link to the next page, except on the last page.\n\n2. `prev` (OPTIONAL): A link to the previous page, except on the first page.\n\n3. `first` (OPTIONAL): A link to the first page, except on the first page.\n\n4. `last` (OPTIONAL): A link to the last page, except on the last page.\n\nFor additional relation types see also the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)."
        },
    )


class ServiceId(RootModel):
    """ServiceId model."""

    root: str = Field(
        ...,
        pattern=r"^[\w\-\.~]+$",
        json_schema_extra={
            "description": "A per-backend unique identifier of the secondary web service, generated by the back-end during creation. MUST match the specified pattern.",
            "example": "wms-a3cca9",
        },
    )


class EoTitle(RootModel):
    """EoTitle model."""

    root: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "A short description to easily distinguish entities.",
            "example": "NDVI based on Sentinel 2",
        },
    )


class EoDescription(RootModel):
    """EoDescription model."""

    root: Optional[str] = Field(
        None,
        json_schema_extra={
            "description": "Detailed multi-line description to explain the entity.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.",
            "example": "Deriving minimum NDVI measurements over pixel time series of Sentinel 2",
        },
    )


class ServiceType(RootModel):
    """ServiceType model."""

    root: str = Field(
        ...,
        json_schema_extra={
            "description": "Definition of the service type to access result data. All available service types can be retrieved via `GET /service_types`. Service types MUST be accepted in a *case insensitive* manner.",
            "example": "wms",
        },
    )


class ServiceEnabled(RootModel):
    """ServiceEnabled model."""

    root: bool = Field(
        ...,
        json_schema_extra={
            "description": "Describes whether a secondary web service is responding to requests (true) or not (false). Disabled services don't produce any costs.",
        },
    )


class Created(RootModel):
    """Created model."""

    root: datetime = Field(
        ...,
        json_schema_extra={
            "description": "Date and time of creation, formatted as a [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) date-time.",
            "example": "2017-01-01T09:32:12Z",
        },
    )


class BillingPlan(RootModel):
    """BillingPlan model."""

    root: str = Field(
        ...,
        json_schema_extra={
            "description": "The billing plan to process and charge the job or service with.\n\nBilling plans MUST be handled in a *case insensitive* manner.\n\nThe plans can be retrieved from `GET /`, but the value returned here may\nnot be in the list of plans any longer.",
            "example": "free",
        },
    )


class Money(RootModel):
    """Money model."""

    root: Optional[float] = Field(
        None,
        ge=0.0,
        json_schema_extra={
            "description": "An amount of money or credits. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling `GET /`. If no currency is set, this field MUST be `null`.",
            "example": 12.98,
        },
    )


class Budget(RootModel):
    root: Optional[float] = Field(
        None,
        ge=0.0,
        json_schema_extra={
            "description": "Maximum amount of costs the request is allowed to produce.\nThe value MUST be specified in the currency of the back-end.\nNo limits apply, if the value is `null` or the back-end has no currency\nset in `GET /`.",
            "example": 100,
        },
    )


class UsageMetric(BaseModel):
    """UsageMetric model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    value: float = Field(..., ge=0.0)
    unit: str


class Usage(BaseModel):
    """Usage model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    cpu: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the CPU usage, usually in a unit such as `cpu-seconds`.",
        },
    )
    memory: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the memory usage, usually in a unit such as `mb-seconds` or `gb-hours`.",
        },
    )
    duration: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the wall time, usually in a unit such as `seconds`, `minutes` or `hours`.",
        },
    )
    network: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the network transfer usage (incoming and outgoing), usually in a unit such as `b` (bytes), `kb` (kilobytes), `mb` (megabytes) or `gb` (gigabytes).",
        },
    )
    disk: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the amount of input (read) and output (write) operations on the storage such as disks, usually in a unit such as `b` (bytes), `kb` (kilobytes), `mb` (megabytes) or `gb` (gigabytes).",
        },
    )
    storage: Optional[UsageMetric] = Field(
        None,
        json_schema_extra={
            "description": "Specifies the usage of storage space, usually in a unit such as `b` (bytes), `kb` (kilobytes), `mb` (megabytes) or `gb` (gigabytes).",
        },
    )


MinLogLevelDefault = Literal["error", "warning", "info", "debug"]


class Service(BaseModel):
    """Service model.

    Ref: https://github.com/Open-EO/openeo-api/blob/1.2.0/openapi.yaml

    Code generated using https://github.com/koxudaxi/datamodel-code-generator/
    """

    id: ServiceId
    title: Optional[EoTitle] = None
    description: Optional[EoDescription] = None
    url: AnyUrl = Field(
        ...,
        json_schema_extra={
            "description": "URL at which the secondary web service is accessible. Doesn't necessarily need to be located within the API.",
            "example": "https://openeo.example/wms/wms-a3cca9",
        },
    )
    type: ServiceType
    enabled: ServiceEnabled
    process: Optional[ProcessGraphWithMetadata] = None
    configuration: Optional[Dict[str, Any]] = Field(
        None,
        json_schema_extra={
            "description": """Map of configuration settings, i.e. the setting names supported by the secondary
            web service combined with actual values. See `GET /service_types` for
            supported configuration settings. For example, this could
            specify the required version of the service, visualization details or
            any other service dependant configuration.""",
            "example": {"version": "1.3.0"},
            "title": "Service Configuration",
        },
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        json_schema_extra={
            "description": "Additional attributes of the secondary web service, e.g. available layers for a WMS based on the bands in the underlying GeoTiff.",
            "example": {"layers": ["ndvi", "evi"]},
            "title": "Secondary Web Service Attributes",
        },
    )
    created: Optional[Created] = None
    plan: Optional[BillingPlan] = None
    costs: Optional[Money] = None
    budget: Optional[Budget] = None
    usage: Optional[Usage] = Field(
        None,
        json_schema_extra={
            "description": "Metrics about the resource usage of the secondary web service.\n\nBack-ends are not expected to update the metrics in real-time.\nFor detailed usage metrics for individual processing steps, metrics\ncan be added to the logs (e.g. `GET /jobs/{job_id}/logs`) with the\nsame schema.",
        },
    )
    log_level: Optional[MinLogLevelDefault] = "info"


class Services(BaseModel):
    """Lists of collections and related links."""

    services: List[Service]
    links: List[Link] = Field(
        ...,
        json_schema_extra={
            "description": "Links related to this list of resources, for example links for pagination\nor alternative formats such as a human-readable HTML version.\nThe links array MUST NOT be paginated.\n\nIf pagination is implemented, the following `rel` (relation) types apply:\n\n1. `next` (REQUIRED): A link to the next page, except on the last page.\n\n2. `prev` (OPTIONAL): A link to the previous page, except on the first page.\n\n3. `first` (OPTIONAL): A link to the first page, except on the first page.\n\n4. `last` (OPTIONAL): A link to the last page, except on the last page.\n\nFor additional relation types see also the lists of\n[common relation types in openEO](#section/API-Principles/Web-Linking)."
        },
    )


class ServiceTypeConfiguration(ProcessJsonSchema):
    "Resource Parameter Model."

    description: Description = Field(
        json_schema_extra={
            "description": "A brief description of the parameter according to [JSON Schema draft-07](https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.1)."
        },
    )


class ServiceTypeMetadata(BaseModel):
    """ServiceTypeMetadata model."""

    title: Optional[EoTitle] = None
    description: Optional[Description] = None
    deprecated: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is deprecated with the potential\nto be removed in any of the next versions. It should be transitioned out\nof usage as soon as possible and users should refrain from using it in\nnew implementations."
        },
    )
    experimental: Optional[bool] = Field(
        None,
        json_schema_extra={
            "description": "Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback."
        },
    )
    configuration: Dict[str, ResourceParameter] = Field(
        json_schema_extra={
            "title": "Service Configuration",
            "description": "Map of supported configuration settings made available to the creator of the service.",
        },
    )
    process_parameters: List[ProcessParameter] = Field(
        json_schema_extra={
            "description": "List of parameters made available to user-defined processes."
        },
    )
    links: Optional[List[Link]] = Field(
        None,
        json_schema_extra={
            "description": "Links related to this service type, e.g. more information about the configuration settings and process parameters."
        },
    )


class ServiceTypes(RootModel):
    """ServiceTypes model."""

    root: Dict[str, ServiceTypeMetadata] = Field(
        json_schema_extra={"description": "Map of supported secondary web services."},
    )


class ServiceInput(BaseModel):
    """Service creation/update input model."""

    process: ProcessGraphWithMetadata = Field(
        ...,
        description="A process graph defines the data processing that should be applied to EO data.",
    )
    type: str = Field(
        ...,
        description="The type of service to be created.",
    )
    title: Optional[str] = Field(
        None,
        description="A title for the service.",
    )
    description: Optional[str] = Field(
        None,
        description="A description for the service.",
    )
    enabled: Optional[bool] = Field(
        True,
        description="Indicates whether the service is enabled or not.",
    )
    configuration: Optional[Dict[str, Any]] = Field(
        None,
        description="Configuration parameters for the service.",
    )


class ResultRequest(BaseModel):
    """Synchronous Result Request"""

    process: ProcessGraphWithMetadata
    budget: Optional[Budget] = None
    plan: Optional[BillingPlan] = None
    log_level: Optional[MinLogLevelDefault] = "info"


JsonSchema.model_rebuild()
ProcessArgumentValue.model_rebuild()
ProcessGraphWithMetadata.model_rebuild()
